tinymce.PluginManager.add("charcount",function(e){
    function t(){
        e.theme.panel.find("#charcount").text([charCountText,a.getCount()])
    }

    function checkInitialLimit() {
        var charCount = a.getCount();
        if(e.settings.charLimit && charCount > e.settings.charLimit) {
            var content =  htmlsubstring(e.getContent(),0,e.settings.charLimit)
            e.setContent(content);
            //ed.execCommand('mceInsertContent',false,"<span class="+Z+">"+copyString+"</span>");
        }
    }

    var n,o,a=this,charCountText;
//    n=e.getParam("charcount_countregex",/[a-z0-9\u2019\x27\-\u00C0-\u1FFF]+/g),
    o=e.getParam("charcount_cleanregex",/[\x27\x22]*/g),
        e.on("init",function(){
            checkInitialLimit();

            var n=e.theme.panel&&e.theme.panel.find("#statusbar")[0];
            charCountText = "Characters: {0}" + (e.settings.charLimit?" (Limit: "+ e.settings.charLimit+")":"");
            n&&window.setTimeout(function(){
                n.insert({
                    type:"label",
                    name:"charcount",
                    text:[charCountText,a.getCount()],
                    classes:"wordcount",
                    disabled:e.settings.readonly
                },0),e.on("setcontent beforeaddundo",function(){
                        t();
                }), e.on("keydown",function(ev){
                    var charCount = a.getCount();
                    if(charCount >= e.settings.charLimit) {
                        var keyCode = ev.keyCode;
                        var isInputKeyCode = (keyCode == 32 || (keyCode >= 48 && keyCode <= 90) || (keyCode >= 96 && keyCode <= 111) || (keyCode >= 186 && keyCode <= 222));
                        if(isInputKeyCode) {
                            return false;
                        }
                    } else {
                        t();
                    }
                }),
                    e.on("PastePreProcess",function(c){
                    var totalCharCount = a.getCount();
                    var pastedCharCount = a.getCountByContent(c.content);
                    var limitedCharCount = e.settings.charLimit;
                    //console.log(limitedCharCount);
                    if(limitedCharCount) {
                        if(totalCharCount > limitedCharCount) {
                            c.content = "";
                        } else if((totalCharCount + pastedCharCount) > limitedCharCount) {
                            c.content = htmlsubstring(c.content,0,(limitedCharCount - totalCharCount))
                        }
                    }

                }), e.on("LoadContent",function(el){
//                    32==e.keyCode&&t()
                    console.log(el)
                }),
                    e.on("keyup",function(e){
//                    32==e.keyCode&&t()
                        t();
                    })
                    ,e.on("setcontent",function(e1){

                });
            },0)
        }),
        a.getCount=function(){
            //a = e.getContent().replace(/(<([^>]+)>)/ig,"").length;
            var t=e.getContent({format:"raw"}),
                a=0;
            if(t){

                t=t.replace(/<[^>]+>/g,"").replace(/&nbsp;/gi," "),
                    t=t.replace(/(\w+)(&#?[a-z0-9]+;)+(\w+)/i, "$1$3");
//                t=t.replace(o,"");
              //  var r= t.trim();
				var r= t;//$j.trim(t);
                r&&(a=r.length)
            }
            return a
        }
    a.getCountByContent=function(t) {
        //var t=e.getContent({format:"raw"}),
            var a=0;
        if(t){

            t=t.replace(/<[^>]+>/g,"").replace(/&nbsp;/gi," "),
                t=t.replace(/(\w+)(&#?[a-z0-9]+;)+(\w+)/i, "$1$3");
//                t=t.replace(o,"");
            //  var r= t.trim();
            var r= t;//$j.trim(t);
            r&&(a=r.length)
        }
        return a
    }

    function htmlsubstring(text, start, limit) {
        var trimedtext = text.replace(/[\n]/g,"");
        trimedtext =  text.replace(/[\n]/g,"")
        var startTags = '';
        var totalCount = limit;
        var startPos = start;
        var substr = '';
        var matches1 =  trimedtext.match(/^<\/?[^>]*>?/);
        if(matches1 && matches1.length > 0) {
            if(matches1.length > 1) {
                startTags = matches1[1];
                totalCount = totalCount + startTags.length;
            }
        }
        substr = trimedtext.substring(start, totalCount);
        var pos =  startTags.length;

        while(1) {
            var temp = substr.substring(pos, substr.length)
            var matches2 = temp.match(/<\/?[^>]*>?/g);
            if(matches2 && matches2.length > 0) {
                var mStr = matches2.join("");
                pos = pos + totalCount;
                totalCount = totalCount + mStr.length;
            } else {
                pos = pos + 1;
                totalCount = totalCount + 1;
            }
            substr = trimedtext.substring(start, totalCount - 1);
            var currCount = substr.replace(/<\/?[^>]*>?/g,"").replace(/&nbsp;/g," ").replace(/(\w+)(&#?[a-z0-9]+;)+(\w+)/i, "$1$3").length;
            //var currCount = substr.replace(/<\/?[^>]*>?/g,"").replace(/&nbsp;/g," ").replace(/(\w+)(&#?[a-z0-9]+;)+(\w+)/i, "$1$3").length;
            if(currCount >= limit) {
                break;
            }
        }
        return substr;
    }

    function getStats(e) {
        var body = e.getBody(), text = tinymce.trim(body.innerText || body.textContent);

        return {
            chars: text.length,
            words: text.split(/[\w\u2019\'-]+/).length
        };
    }

});