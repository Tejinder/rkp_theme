{namespace jive.people}

/**
* Renders the full page for "people".
*
* @param? canonicalUrl the canonical url of this page
* @param? nextUrl the next paginated url for this page
* @param? previousUrl the previous paginated url of this page
* @param subNavLinks Links to display as subnavigation for the browse view.
* @param templateView The model to render the page template.
*/
{template .main}
    {call jive.skin.template.main data="$templateView"}
        {param title}
            {i18nText('global.browse')} - {i18nText('browse.people.all.title')}
        {/param}
        {param canonicalUrl: $canonicalUrl/}
        {param nextUrl : $nextUrl/}
        {param previousUrl : $previousUrl/}
        {param selectedLinkID: 'jive-nav-link-conx'/}
        {param bodyClass: 'j-body-yourconnections'/}
        {param bodyContent}
            {call jive.nav.browseSubNav}
                {param links: $subNavLinks/}
        {param labelHtml: i18nText('browse.people.subnav.label') /}
                {param selectedLinkID: 'jive-nav-link-conx'/}
            {/call}
            <header class="j-page-header"></header>
			<link rel="stylesheet" href="/themes/rkp_theme/style/rkp.css" type="text/css" media="all" />

            {call .body data="all"/}
        {/param}
		{param showNav: 'true'/}
    {/call}
{/template}

/**
* Renders the content section for "people".
*
* @param browseViewID A unique name for this browse view.
* @param archetypeID The ID of the archetype associated with this browse view.
* @param itemsView An {@link ItemsViewBean} object which has associated items.
* @param filterGroup A {@link FilterGroupBean} object with nested filters.
* @param orgchartEnabled Whether or not the orgcharting functionality is enabled.
* @param targetUserID The userID of the items being displayed.
* @param labelLists Any UserRelationshipLists the user has created for their connections.
* @param bidirectionalConnections Whether or not friending is bidirectional or not.
* @param? layoutClass An optional class passed to the layout div element
* @param urlParams map of query parameters for the last request
* @param urlPath path for the last request
* @param viewingSelf Whether or not the current user is viewing their own information
* @param? guest Whether or not the current user is the guest user
* @param? targetUserName The target user's name.
* @param? accountCreationEnabled Whether or not account creation is enabled
* @param? validationEnabled Whether or not account validation is enabled
* @param invitationVisible Whether to show invitation link
* @param feedsEnabled Whether or not rss feeds are current enabled
* @param trialMode Whether or not the app is in trial mode.
* @param tryJiveLink A link to the try jive
*
* @depends path=/resources/scripts/apps/browse/user/model/user_source.js
* @depends path=/resources/scripts/apps/filters/main.js
* @depends path=/resources/scripts/apps/filters/recommended_content.js
* @depends path=/resources/scripts/apps/orgchart/main.js
* @depends path=/resources/scripts/apps/direct_messaging/factory.js lazy=true
* @depends path=/resources/scripts/apps/filters/recommended_content.js
* @depends path=/resources/scripts/apps/filters/activity_time_pagination.js
* @depends path=/resources/scripts/apps/filters/invitation.js
* @depends path=/resources/scripts/apps/browse/activity/info/main.js
* @depends path=/resources/scripts/apps/userrelationshiplist/main.js
*
* @depends template=jive.browse.user.detailUserHeader
* @depends template=jive.browse.user.detailUserItem
* @depends template=jive.people.noResults
* @depends template=jive.browse.user.detailExternalUserItem
* @depends template=jive.browse.user.thumbnailExternalUserItem
*/
{template .body}

     {call jive.shared.soy.resourceInlineJs}
         {param code}
         require(['apps/orgchart/main', 'documentReady'],
             function(OrgChartApp) {lb}
                 var userSource = new jive.Browse.User.ItemSource();
                 var options = {lb}
                     itemSource: userSource,
                     userPrefSource: new jive.Browse.User.ItemSource(),
                     browseViewID: '{$browseViewID |escapeJs}',
                     archetypeID: '{$archetypeID |escapeJs}',
                     guest: {$guest},
                     targetUserID: '{$targetUserID}',
                     filterGroup: {buildJson($filterGroup) |noAutoescape},
                     itemViewID: '{$itemsView.itemViewID |escapeJs}',
                     numResults: {length($itemsView.items) |escapeJs},
                     pageSize: {$itemsView.pageSize |escapeJs},
                     pageNumber: {$itemsView.pageNumber |escapeJs},
                     paginationStrategy: '{$itemsView.paginationStrategy |escapeJs}',
                     activityTime: {if ($itemsView.activityTime)}{$itemsView.activityTime |escapeJs}{else}0{/if},
                     token: '{$itemsView.token}',
                     labelLists: {buildJson($labelLists) |noAutoescape},
                     bidirectionalConnections: {$bidirectionalConnections},
                     noResultTemplateConfig: {lb}
                        templateName: 'jive.people.noResults',
                        data: {lb}
                            filterIDs: {buildJson($filterGroup.appliedFilterIDs)|noAutoescape},
                            viewingSelf: {$viewingSelf},
                            targetUserName: '{$targetUserName}',
                            accountCreationEnabled: {$accountCreationEnabled}
                        {rb}
                    {rb},
                     recommenderType: 'people',
                     i18n: {lb}
                        errMsg: '{i18nText('browse.people.conx.label.err.noname') |escapeJs}',
                        delMsg: '{i18nText('browse.people.conx.label.delete') |escapeJs}'
                     {rb}
                 {rb};

                 var filterApp = new (jive.oo.compose(
                     jive.Filters.Main,
                     jive.Filters.RecommendedContent,
                     jive.Filters.ActivityTimePagination,
                     jive.UserRelationshipList.Main
                     {if $orgchartEnabled}
                         , OrgChartApp
                     {/if}
                     {if $trialMode}
                         , jive.Filters.Invitation
                     {/if}
                 ))(options);

                 $j('#j-browse-item-grid').delegate('a.js-create-direct-message', 'click', function(e) {lb}
                     e.preventDefault();
                     var userID = $j(this).closest('[data-object-id]').attr('data-object-id');
                     require(['apps/direct_messaging/factory'], function(DirectMessaging) {lb}
                         DirectMessaging.sendMessageToUserIds([userID]);
                     {rb});
                 {rb});

                {if $trialMode}
                 $j('#j-browse-item-grid').delegate('.j-browse-item-invite-link', 'click', function(){lb}
                    $j('#j-invite-button').click();
                    return false;
                 {rb});
                 {/if}
             {rb});
         {/param}
     {/call}

    <!-- BEGIN main body -->

    <div class="j-layout j-layout-sl clearfix {if $layoutClass}{$layoutClass}{/if} j-rc5">
        <div class="j-colum-wrap-s">
            <div class="j-column j-column-s">

                {call jive.browse.filter.filterGroup data="$filterGroup"}
                    {param urlPath: $urlPath /}
                {/call}


                    {if $invitationVisible}
                         {call jive.invitation.inviteLink}
                            {param containerId : -1 /}
                            {param containerType : -1 /}
                        {/call}
                    {elseif $tryJiveLink and $tryJiveLink.visible}
                        {call jive.try_jive.tryJiveLink data="$tryJiveLink"/}
                    {/if}

            </div>
        </div>
        <div class="j-column-wrap-l">
            <div class="j-column j-column-l j-rc5">

             <!-- Display guest tip if unauthenticated -->
            {if ($guest)}
                {call jive.guest.page.loginTip}
                    {param i18nKey}browse.guesttip.people{/param}
                    {param accountCreationEnabled: $accountCreationEnabled/}
                    {param validationEnabled: $validationEnabled/}
                {/call}
            {/if}

                <!-- BEGIN browse & filter block -->

                {call jive.browse.filter.filters data="$filterGroup"}
                    {param itemsView: $itemsView /}
                    {param urlParams: $urlParams /}
                    {param urlPath: $urlPath /}
                    {param hideFilterGroup: ($itemsView.template or $filterGroup.defaultRecommended) /}
                {/call}

                <div id="j-browse-item-grid" class="j-box-body" role="main" aria-label="{i18nText('browse.filter.grid')}">
                 {if ($itemsView.template)}
                     {call jive.shared.soy.render}
                         {param templateName: $itemsView.template /}
                         {param data: $itemsView /}
                         {param failGracefully: false /}
                     {/call}
                 {else}
                     {call jive.browse.grid.itemGrid data="$itemsView"}
                        {param browseViewID: $browseViewID/}
                        {param archetypeID: $archetypeID/}
                        {param headerTemplate:'jive.browse.user.detailUserHeader'/}
                        {param viewingSelf: $viewingSelf/}
                        {param noResultTemplateConfig: ['templateName': 'jive.people.noResults', 'data': ['filterIDs': $filterGroup.appliedFilterIDs, 'targetUserName': $targetUserName, 'viewingSelf' : $viewingSelf, 'accountCreationEnabled': $accountCreationEnabled]]/}
                     {/call}
                 {/if}
                 </div>

                 {call jive.browse.grid.moreSearchResultsAvailableHolder data="$itemsView"/}

                 <div class="j-browse-filter-row j-bottom-row j-rc4">
                     {call jive.shared.soy.paginationLinks}
                         {param current: $itemsView.pageNumber /}
                         {param max: $itemsView.pageNumber + ($itemsView.hasNext ? 1 : 0) /}
                         {param pageSize: $itemsView.pageSize /}
                         {param urlParams: $urlParams /}
                         {param urlPath: $urlPath /}
                     {/call}
                 </div>

                <!-- END browse & filter block -->


                {if ($feedsEnabled)}
                 {call .friendFeedLink data="all"/}
                {/if}
            </div>
        </div>
    </div>
     <!-- END main body -->
{/template}

/**
* displays content if there are no item results
* @param? filterIDs the currently selected filterIDs
* @param? targetUserName The target user's name.
* @param? viewingSelf Whether or not the current user is viewing their own information
* @param? accountCreationEnabled Whether or not account creation/invitations enabled
*/
{template .noResults}
    <div class="j-browse-info j-empty font-color-meta clearfix">
        {if $viewingSelf}
            {if $filterIDs and length($filterIDs) == 1}{/if}/*delete this if statement as it is only here so soy doesn't break because of unused params*/
        /*Uncomment the following if statements to allow for conditional no result displays by filter*/
            /*{if $filterIDs and length($filterIDs) == 1}
                {if $filterIDs[0] == 'all'}
                    ALL VIEW - Nothing exists in the system
                {elseif $filterIDs[0] == 'following'}
                    FOLLOWING VIEW - You aren't following anything.
                {elseif $filterIDs[0] == 'followers'}
                    FOLLOWERS VIEW - nobody is following you yet.
                {elseif $filterIDs[0] == 'historyarchetype[people]'}
                    HISTORY VIEW - you haven't viewed any people.
                {else}
                    DEFAULT VIEW - Fallback empty top level filter
                {/if}
            {else}*/
                {if $accountCreationEnabled}
				    <span class="j-arrow"></span>
				{/if}
			    <h3 class="font-face-deco">{i18nText('browse.people.empty.header')}</h3>
			    {if $accountCreationEnabled}
			    <p>{i18nText('browse.people.empty.message')}</p>
			    {else}
			    <p>{i18nText('browse.people.empty.message.noinvites')}</p>
			    {/if}
            /*{/if}*/
        {elseif $targetUserName}
            {i18nText('profile.friends.nofollow.label', $targetUserName)}
        {/if}
    </div>
{/template}
/**
* Show a link to activity for followed users/friends.
*
* @param? listID The ID of a specified UserRelationshipList, if any.
* @param bidirectionalConnections Whether or not friending is bidirectional or not.
*/
{template .friendFeedLink}
    <div id="j-friend-feed-link" class="j-friend-feed-link">
        {if $listID}
            <a href="{buildUrl('/feeds/yourstuff/friends','currentRelationshipList',$listID)}">
        {else}
            <a href="{buildUrl('/feeds/yourstuff/friends')}">
        {/if}
        <span class="jive-icon-glyph icon-feed"></span>
        {if $bidirectionalConnections}
            {i18nText('profile.friends.activityfeed.friends.link')}
        {else}
            {i18nText('profile.friends.activityfeed.connections.link')}
        {/if}
        </a>
     </div>
{/template}
